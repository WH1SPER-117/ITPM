import React, { useState, useEffect } from 'react';
import { jsPDF } from 'jspdf';
import axios from 'axios';
import Header from '../Home/Header';
import Footer from '../Home/Footer';

function ServiceProviderReports() {
  const [categories, setCategories] = useState([]);
  const [selectedCategories, setSelectedCategories] = useState([]);
  const [reportData, setReportData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        setLoading(true);
        const response = await axios.get('http://localhost:5000/serviceProviders/service-categories');
        console.log('API Response:', response.data);
        setCategories(response.data);
        setLoading(false);
      } catch (error) {
        console.error('Error fetching categories:', error);
        setError('Failed to load service categories. Please try again.');
        setLoading(false);
      }
    };
    fetchCategories();
  }, []);

  const handleCategoryChange = (e) => {
    const value = e.target.value;
    setSelectedCategories((prev) =>
      prev.includes(value)
        ? prev.filter((cat) => cat !== value)
        : [...prev, value]
    );
  };

  const generateReport = async () => {
    try {
      console.log('Generating report with categories:', selectedCategories);
      const response = await axios.post('http://localhost:5000/serviceProviders/service-provider-report', {
        categories: selectedCategories,
      });
      console.log('Report response:', response.data);
      setReportData(response.data);
      generatePDF(response.data);
    } catch (error) {
      console.error('Error generating report:', error.response ? error.response.data : error.message);
      alert('Failed to generate report. Please check console for details.');
    }
  };

  const generatePDF = (data) => {
    const doc = new jsPDF();
    const logo = new Image();
    logo.src = '/logo.png';

    logo.onload = () => {
      console.log('Logo loaded successfully');
      doc.addImage(logo, 'PNG', 10, 10, 30, 30);
      generatePDFContent(doc, data);
    };

    logo.onerror = () => {
      console.error('Failed to load logo, proceeding without it');
      generatePDFContent(doc, data);
    };
  };

  const generatePDFContent = (doc, data) => {
    doc.setFontSize(20);
    doc.setTextColor(30, 84, 112);
    doc.text('Service Provider Report', 50, 25);

    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 10, 50);
    doc.text(`Total Providers: ${data.totalProviders}`, 10, 60);

    doc.setFillColor(108, 177, 218);
    doc.rect(10, 70, 190, 10, 'F');
    doc.setTextColor(255, 255, 255);
    doc.text('Service Category', 12, 76);
    doc.text('Provider Count', 150, 76, { align: 'right' });

    let y = 80;
    doc.setTextColor(0, 0, 0);
    data.categories.forEach((item, index) => {
      doc.setFillColor(index % 2 === 0 ? 209 : 236, 255, 255);
      doc.rect(10, y, 190, 10, 'F');
      doc.text(item.category, 12, y + 6);
      doc.text(item.count.toString(), 150, y + 6, { align: 'right' });
      y += 10;
    });

    y += 10;
    Object.keys(data.providersByCategory).forEach((category, catIndex) => {
      doc.setFontSize(14);
      doc.setTextColor(30, 84, 112);
      doc.text(`${category} Providers`, 10, y);
      y += 10;

      doc.setFillColor(108, 177, 218);
      doc.rect(10, y, 190, 10, 'F');
      doc.setTextColor(255, 255, 255);
      doc.setFontSize(10);
      doc.text('Name', 12, y + 6);
      doc.text('Email', 60, y + 6);
      doc.text('Phone', 110, y + 6);
      doc.text('Services', 140, y + 6);
      doc.text('Joined', 170, y + 6);
      y += 10;

      data.providersByCategory[category].forEach((provider, index) => {
        if (y + 10 > doc.internal.pageSize.height - 20) {
          doc.addPage();
          y = 20;
        }
        doc.setFillColor(index % 2 === 0 ? 209 : 236, 255, 255);
        doc.rect(10, y, 190, 10, 'F');
        doc.setTextColor(0, 0, 0);
        doc.text(provider.name.substring(0, 20), 12, y + 6);
        doc.text(provider.email.substring(0, 20), 60, y + 6);
        doc.text(provider.phoneNo, 110, y + 6);
        doc.text(provider.service.substring(0, 15), 140, y + 6);
        doc.text(provider.createdDate, 170, y + 6);
        y += 10;
      });
      y += 10;
    });

    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text('Generated by Admin Dashboard', 10, doc.internal.pageSize.height - 10);

    doc.save('Service_Provider_Report.pdf');
  };

  return (
    <div className="bg-[#d1ecff] min-h-screen flex flex-col justify-between px-6">
      <Header />
      <div className="max-w-4xl mx-auto bg-white p-10 rounded-lg shadow-2xl mt-12 mb-12">
        <h1 className="text-4xl font-bold text-[#1e5470] text-center mb-8">Service Provider Reports</h1>
        <div className="mb-6">
          <h2 className="text-xl font-semibold text-[#1e5470] mb-4">Select Service Categories</h2>
          {loading ? (
            <p className="text-gray-500">Loading categories...</p>
          ) : error ? (
            <p className="text-red-500">{error}</p>
          ) : categories.length === 0 ? (
            <p className="text-gray-500">No service categories available. Add service providers to see categories.</p>
          ) : (
            <div className="grid grid-cols-3 gap-4">
              {categories.map((category) => (
                <label key={category} className="flex items-center">
                  <input
                    type="checkbox"
                    value={category}
                    onChange={handleCategoryChange}
                    className="mr-2"
                  />
                  {category}
                </label>
              ))}
            </div>
          )}
        </div>
        <button
          onClick={() => {
            console.log('Button clicked', { selectedCategories, loading, error });
            generateReport();
          }}
          disabled={selectedCategories.length === 0 || loading || error}
          className={`w-full bg-[#6cb1da] text-white p-4 rounded-lg text-lg font-semibold shadow-md transition duration-300 ${
            selectedCategories.length === 0 || loading || error ? 'opacity-50 cursor-not-allowed' : 'hover:bg-[#6ec1d1]'
          }`}
        >
          Generate Report
        </button>
      </div>
      <Footer />
    </div>
  );
}

export default ServiceProviderReports;